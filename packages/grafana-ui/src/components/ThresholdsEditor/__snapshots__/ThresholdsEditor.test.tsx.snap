// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render should render with base threshold 1`] = `
<div
  className="thresholds"
>
  <div
    className="thresholds-row"
    key="100"
  >
    <div
      className="thresholds-row-add-button"
      onClick={[Function]}
    >
      <i
        className="fa fa-plus"
      />
    </div>
    <div
      className="thresholds-row-color-indicator"
      style={
        Object {
          "backgroundColor": "#73BF69",
        }
      }
    />
    <div
      className="thresholds-row-input"
    >
      <div
        className="thresholds-row-input-inner"
      >
        <span
          className="thresholds-row-input-inner-arrow"
        />
        <div
          className="thresholds-row-input-inner-color"
        >
          <div
            className="thresholds-row-input-inner-color-colorpicker"
          >
            <WithTheme(ColorPicker)
              color="green"
              enableNamedColors={true}
              onChange={[Function]}
            >
              <ColorPicker
                color="green"
                enableNamedColors={true}
                onChange={[Function]}
                theme={
                  Object {
                    "type": "dark",
                  }
                }
              >
                <PopoverController
                  content={
                    <ColorPickerPopover
                      color="green"
                      enableNamedColors={true}
                      onChange={[Function]}
                      theme={
                        Object {
                          "type": "dark",
                        }
                      }
                    />
                  }
                  hideAfter={300}
                >
                  <ForwardRef(ColorPickerTrigger)
                    color="#73BF69"
                    onClick={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <div
                      onClick={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "background": "inherit",
                          "border": "none",
                          "borderRadius": 10,
                          "color": "inherit",
                          "cursor": "pointer",
                          "overflow": "hidden",
                          "padding": 0,
                        }
                      }
                    >
                      <div
                        style={
                          Object {
                            "backgroundImage": "url(data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAIAAADZF8uwAAAAGUlEQVQYV2M4gwH+YwCGIasIUwhT25BVBADtzYNYrHvv4gAAAABJRU5ErkJggg==)",
                            "border": "none",
                            "float": "left",
                            "height": 15,
                            "margin": 0,
                            "position": "relative",
                            "width": 15,
                            "zIndex": 0,
                          }
                        }
                      >
                        <div
                          style={
                            Object {
                              "backgroundColor": "#73BF69",
                              "bottom": 0,
                              "display": "block",
                              "left": 0,
                              "position": "absolute",
                              "right": 0,
                              "top": 0,
                            }
                          }
                        />
                      </div>
                    </div>
                  </ForwardRef(ColorPickerTrigger)>
                </PopoverController>
              </ColorPicker>
            </WithTheme(ColorPicker)>
          </div>
        </div>
        <div
          className="thresholds-row-input-inner-value"
        >
          <Input
            className=""
            readOnly={true}
            type="text"
            value="Base"
          >
            <div
              style={
                Object {
                  "flexGrow": 1,
                }
              }
            >
              <input
                className="gf-form-input"
                readOnly={true}
                type="text"
                value="Base"
              />
            </div>
          </Input>
        </div>
      </div>
    </div>
  </div>
</div>
`;
