package {{ .Meta.MachineName }}

import (
	"github.com/grafana/grafana/pkg/kindsys"
	"github.com/grafana/thema"
	"github.com/grafana/thema/vmux"
)

// TODO standard generated docs
type Kind struct {
	decl kindsys.Decl[kindsys.RawMeta]
}

// type guard
var _ kindsys.Raw = &Kind{}

// TODO standard generated docs
func NewKind() (*Kind, error) {
	decl, err := kindsys.LoadCoreKind[kindsys.RawMeta]("kinds/raw/{{ .Meta.MachineName }}", nil, nil)
	if err != nil {
		return nil, err
	}

	return &Kind{
		decl: *decl,
	}, nil
}

// TODO standard generated docs
func (k *Kind) Name() string {
	return "{{ .Meta.Name }}"
}

// TODO standard generated docs
func (k *Kind) MachineName() string {
	return "{{ .Meta.MachineName }}"
}

// TODO standard generated docs
func (k *Kind) Maturity() kindsys.Maturity {
	return k.decl.Meta.Maturity
}

// TODO standard generated docs
func (k *Kind) Meta() kindsys.RawMeta {
	return k.decl.Meta
}
