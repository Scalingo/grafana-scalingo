// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: parca/debuginfo/v1alpha1/debuginfo.proto

package debuginfov1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/parca-dev/parca/gen/proto/go/parca/debuginfo/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DebugInfoServiceName is the fully-qualified name of the DebugInfoService service.
	DebugInfoServiceName = "parca.debuginfo.v1alpha1.DebugInfoService"
)

// DebugInfoServiceClient is a client for the parca.debuginfo.v1alpha1.DebugInfoService service.
type DebugInfoServiceClient interface {
	// Exists returns true if the given build_id has debug info uploaded for it.
	Exists(context.Context, *connect_go.Request[v1alpha1.ExistsRequest]) (*connect_go.Response[v1alpha1.ExistsResponse], error)
	// Upload ingests debug info for a given build_id
	Upload(context.Context) *connect_go.ClientStreamForClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse]
	// Download returns the debug info for a given build_id.
	Download(context.Context, *connect_go.Request[v1alpha1.DownloadRequest]) (*connect_go.ServerStreamForClient[v1alpha1.DownloadResponse], error)
}

// NewDebugInfoServiceClient constructs a client for the parca.debuginfo.v1alpha1.DebugInfoService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDebugInfoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DebugInfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &debugInfoServiceClient{
		exists: connect_go.NewClient[v1alpha1.ExistsRequest, v1alpha1.ExistsResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebugInfoService/Exists",
			opts...,
		),
		upload: connect_go.NewClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebugInfoService/Upload",
			opts...,
		),
		download: connect_go.NewClient[v1alpha1.DownloadRequest, v1alpha1.DownloadResponse](
			httpClient,
			baseURL+"/parca.debuginfo.v1alpha1.DebugInfoService/Download",
			opts...,
		),
	}
}

// debugInfoServiceClient implements DebugInfoServiceClient.
type debugInfoServiceClient struct {
	exists   *connect_go.Client[v1alpha1.ExistsRequest, v1alpha1.ExistsResponse]
	upload   *connect_go.Client[v1alpha1.UploadRequest, v1alpha1.UploadResponse]
	download *connect_go.Client[v1alpha1.DownloadRequest, v1alpha1.DownloadResponse]
}

// Exists calls parca.debuginfo.v1alpha1.DebugInfoService.Exists.
func (c *debugInfoServiceClient) Exists(ctx context.Context, req *connect_go.Request[v1alpha1.ExistsRequest]) (*connect_go.Response[v1alpha1.ExistsResponse], error) {
	return c.exists.CallUnary(ctx, req)
}

// Upload calls parca.debuginfo.v1alpha1.DebugInfoService.Upload.
func (c *debugInfoServiceClient) Upload(ctx context.Context) *connect_go.ClientStreamForClient[v1alpha1.UploadRequest, v1alpha1.UploadResponse] {
	return c.upload.CallClientStream(ctx)
}

// Download calls parca.debuginfo.v1alpha1.DebugInfoService.Download.
func (c *debugInfoServiceClient) Download(ctx context.Context, req *connect_go.Request[v1alpha1.DownloadRequest]) (*connect_go.ServerStreamForClient[v1alpha1.DownloadResponse], error) {
	return c.download.CallServerStream(ctx, req)
}

// DebugInfoServiceHandler is an implementation of the parca.debuginfo.v1alpha1.DebugInfoService
// service.
type DebugInfoServiceHandler interface {
	// Exists returns true if the given build_id has debug info uploaded for it.
	Exists(context.Context, *connect_go.Request[v1alpha1.ExistsRequest]) (*connect_go.Response[v1alpha1.ExistsResponse], error)
	// Upload ingests debug info for a given build_id
	Upload(context.Context, *connect_go.ClientStream[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error)
	// Download returns the debug info for a given build_id.
	Download(context.Context, *connect_go.Request[v1alpha1.DownloadRequest], *connect_go.ServerStream[v1alpha1.DownloadResponse]) error
}

// NewDebugInfoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDebugInfoServiceHandler(svc DebugInfoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/parca.debuginfo.v1alpha1.DebugInfoService/Exists", connect_go.NewUnaryHandler(
		"/parca.debuginfo.v1alpha1.DebugInfoService/Exists",
		svc.Exists,
		opts...,
	))
	mux.Handle("/parca.debuginfo.v1alpha1.DebugInfoService/Upload", connect_go.NewClientStreamHandler(
		"/parca.debuginfo.v1alpha1.DebugInfoService/Upload",
		svc.Upload,
		opts...,
	))
	mux.Handle("/parca.debuginfo.v1alpha1.DebugInfoService/Download", connect_go.NewServerStreamHandler(
		"/parca.debuginfo.v1alpha1.DebugInfoService/Download",
		svc.Download,
		opts...,
	))
	return "/parca.debuginfo.v1alpha1.DebugInfoService/", mux
}

// UnimplementedDebugInfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDebugInfoServiceHandler struct{}

func (UnimplementedDebugInfoServiceHandler) Exists(context.Context, *connect_go.Request[v1alpha1.ExistsRequest]) (*connect_go.Response[v1alpha1.ExistsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebugInfoService.Exists is not implemented"))
}

func (UnimplementedDebugInfoServiceHandler) Upload(context.Context, *connect_go.ClientStream[v1alpha1.UploadRequest]) (*connect_go.Response[v1alpha1.UploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebugInfoService.Upload is not implemented"))
}

func (UnimplementedDebugInfoServiceHandler) Download(context.Context, *connect_go.Request[v1alpha1.DownloadRequest], *connect_go.ServerStream[v1alpha1.DownloadResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("parca.debuginfo.v1alpha1.DebugInfoService.Download is not implemented"))
}
